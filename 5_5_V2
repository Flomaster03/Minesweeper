import kotlin.random.Random

const val ROW = 9
const val COL = 9
const val MINE = 'x'
const val UNKNOWN = '.'
const val MARK = '*'
const val CLEAR = '/'

val marks = mutableListOf<Cell>() //отметки игрока на поле - предположение, где находятся мины
val mines = mutableListOf<Cell>() //мины на поле
val cells = mutableListOf<Cell>() //ячейки, свободные от мин и чисел
var countOfMines = 0  //количество мин
var countOfUnknownCells = ROW * COL  //количество неисследованных ячеек
val num = arrayOf(-1, 0, 1)
var isGameContinue = true
var field = arrayOf<Array<Char>>()
var fieldWithMinesAndDigits = arrayOf<Array<Char>>()

fun main() {

    prepareField()
    if (isPlayerWin()) return
    putMarks()
}

//заполнение поля минами и цифрами
fun prepareField() {
    val emptyField = fillEmptyField()
    println("How many mines do you want on the field?")
    countOfMines = readln().toInt()
    printField(emptyField)
    println("Set/unset mines marks or claim a cell as free:")
    val (x, y, action) = readln().split(" ")
    val fieldWithMines = fillFieldWithMines(countOfMines, emptyField, y.toInt(), x.toInt())
    fieldWithMinesAndDigits = fillFieldWithMinesAndDigits(fieldWithMines)
    field = fillEmptyField()
    actionFree(x.toInt(), y.toInt())

}

//заполнение пустого поля
fun fillEmptyField(): Array<Array<Char>> {
    return Array(ROW) { Array(COL) { UNKNOWN } }
}

//установка мин на поле
fun fillFieldWithMines(count: Int, field: Array<Array<Char>>, y: Int, x: Int): Array<Array<Char>> {
    var counter = 0
    val emptyCells = mutableListOf<Cell>()
    for (i in 0..2) {            //мина не может содержаться в указанной пользователем ячейке
        for (j in 0..2) {        //и 8 вокруг нее; чтобы эта ячейка не содержала также цифру,
            val col = x - 1 + num[i]  //а точно была пуста
            val row = y - 1 + num[j]
            if (col in 0 until COL && row in 0 until ROW) emptyCells.add(Cell(col, row))
        }
    }
    val newField = field
    while (counter < count) {
        val row = Random.nextInt(0, ROW)
        val col = Random.nextInt(0, COL)
        if (emptyCells.contains(Cell(col, row))) continue
        if (newField[row][col] == UNKNOWN) newField[row][col] = MINE else continue
        mines.add(Cell(col, row))
        counter++
    }
    return newField
}

/*
Заполнение поля цифрами.
Последовательно проверяется каждая ячейка игрового поля. Проверка 8 ячеек вокруг мины.
Если она расположена в углу - проверяется 3 ячейки вокруг нее, если на боковой грани - 5.
Если в ячейке мина - оставляется знак мины.
В каждой пустой ячейке выводится количество мин, с которыми эта ячейка контактирует.
 */
fun fillFieldWithMinesAndDigits(field: Array<Array<Char>>): Array<Array<Char>> {
    val newField = field
    for (row in 0 until ROW) {
        for (col in 0 until COL) {
            if (field[row][col] == MINE) {
                continue
            }
            val upper = when {
                row == 0 -> 0
                col == 0 -> arrayOf(field[row - 1][col], field[row - 1][col + 1]).count { it == MINE }
                col == COL - 1 -> arrayOf(field[row - 1][col - 1], field[row - 1][col]).count { it == MINE }
                else -> arrayOf(
                    field[row - 1][col - 1],
                    field[row - 1][col],
                    field[row - 1][col + 1]
                ).count { it == MINE }
            }
            val medium = when {
                col == 0 -> arrayOf(field[row][col + 1]).count { it == MINE }
                col == COL - 1 -> arrayOf(field[row][col - 1]).count { it == MINE }
                else -> arrayOf(field[row][col - 1], field[row][col + 1]).count { it == MINE }
            }
            val lower = when {
                row == ROW - 1 -> 0
                col == 0 -> arrayOf(field[row + 1][col], field[row + 1][col + 1]).count { it == MINE }
                col == COL - 1 -> arrayOf(field[row + 1][col - 1], field[row + 1][col]).count { it == MINE }
                else -> arrayOf(
                    field[row + 1][col - 1],
                    field[row + 1][col],
                    field[row + 1][col + 1]
                ).count { it == MINE }
            }
            val count = upper + medium + lower
            if (count > 0) newField[row][col] = Character.forDigit(count, 10)
        }
    }
    return newField
}

//печать поля.
fun printField(field: Array<Array<Char>>) {
    val sb1 = buildString {
        append(" |")
        repeat(COL) {
            append(it + 1)
        }
        append("|")
    }
    val sb2 = buildString {
        append("-|")
        repeat(COL) {
            append('-')
        }
        append("|")
    }
    println("$sb1\n$sb2")
    for (index in field.indices) {
        print("${index + 1}|")
        print(field[index].joinToString(""))
        println("|")
    }
    println(sb2)
}

/*2 режима: free и mine.
mine: игрок ставит знак '*' в ячейку, где предполагается мина.
При повторном введении координат этой же ячейки знак снимается.
free: если вводятся координаты ячейки с миной, игрок проигрывает.
Если в ячейке есть цифра - открывается одна эта ячейка с цифрой.
Если ячейка пустая -
автоматически открываются пустые ячейки, граничащие друг с другом по вертикали и горизонтали,
до ячеек, содержащих цифры и мины. Если в пустой ячейке имеется знак '*', то он меняется на знак пустой ячейки.
Игрок выигрывает: когда '*' совпадают с локализацией всех мин или
остаются неоткрытыми только ячейки с минами
*/
fun putMarks() {
    while (true) {
        println("Set/unset mines marks or claim a cell as free:")
        val input = readln().split(" ")
        val x = input[0].toInt()
        val y = input[1].toInt()
        val action = input[2]
        if (action == "mine") actionMine(x, y)
        if (action == "free") {
            actionFree(x, y)
            if (!isGameContinue) break
        }
        if (isPlayerWin()) break
    }
}

//логика хода, если действие mine
fun actionMine(x: Int, y: Int) {
    when {
        field[y - 1][x - 1] == MARK -> {
            field[y - 1][x - 1] = UNKNOWN
            printField(field)
            marks.remove(Cell(x - 1, y - 1))
        }

        field[y - 1][x - 1] == UNKNOWN -> {
            field[y - 1][x - 1] = MARK
            printField(field)
            marks.add(Cell(x - 1, y - 1))
        }

        else -> {
            return
        }
    }
}

//логика хода, если действие free
fun actionFree(x: Int, y: Int) {
    when {
        fieldWithMinesAndDigits[y - 1][x - 1] == MINE -> {   //открытие ячейки, где мина
            mines.forEach { field[it.y][it.x] = MINE } //добавляет значки мин на поле
            printField(field)
            println("You stepped on a mine and failed!")
            isGameContinue = false
        }

        fieldWithMinesAndDigits[y - 1][x - 1] in '1'..'9' -> {     //открытие ячейки, где цифра
            if (field[y - 1][x - 1] == UNKNOWN || field[y - 1][x - 1] == MARK) {
                if (field[y - 1][x - 1] == MARK) marks.remove(Cell(x - 1, y - 1))
                field[y - 1][x - 1] = fieldWithMinesAndDigits[y - 1][x - 1]
                printField(field)
                countOfUnknownCells -= 1
                isGameContinue = true
            } else {
                return
            }
        }

        fieldWithMinesAndDigits[y - 1][x - 1] == UNKNOWN -> {   //открытие ячейки, где пусто
            fillEmptyCells(x - 1, y - 1) //автоматическое открытие пустых ячеек,
            for (i in fieldWithMinesAndDigits.indices) {               //связанных с первой
                for (j in fieldWithMinesAndDigits[i].indices) {
                    if (fieldWithMinesAndDigits[i][j] == CLEAR) {
                        field[i][j] = CLEAR
                        cells.add(Cell(j, i))
                    }
                }
            }
            field = fillAroundEmptyCells() //открытие одного ряда ячеек с цифрами
            printField(field)              //по периметру уже открытых пустых ячеек
            isGameContinue = true
        }
    }
}

//проверка игрового поля (условия выигрыша)
fun isPlayerWin(): Boolean {
    if (countOfUnknownCells == countOfMines ||
        (marks.size == countOfMines &&
                marks.count { fieldWithMinesAndDigits[it.y][it.x] == MINE } == countOfMines)
    ) {
        println("Congratulations! You found all the mines!")
        return true
    }
    return false
}

//вводятся координаты пустой ячейки.
// Все соседние с ней пустые ячейки по горизонтали, вертикали, диагонали также обозначаются как пустые
fun fillEmptyCells(x: Int, y: Int) {

    if (x < 0 || x >= COL || y < 0 || y >= ROW) return
    if (fieldWithMinesAndDigits[y][x] != UNKNOWN && fieldWithMinesAndDigits[y][x] != MARK) return
    if (field[y][x] == MARK) marks.remove(Cell(x, y))
    fieldWithMinesAndDigits[y][x] = CLEAR
    countOfUnknownCells -= 1

    fillEmptyCells(x - 1, y - 1)
    fillEmptyCells(x, y - 1)
    fillEmptyCells(x + 1, y - 1)
    fillEmptyCells(x - 1, y + 1)
    fillEmptyCells(x, y + 1)
    fillEmptyCells(x + 1, y + 1)
    fillEmptyCells(x - 1, y)
    fillEmptyCells(x + 1, y)
    return
}

// заполняет ячейки с цифрами вокруг уже открытых пустых ячеек
fun fillAroundEmptyCells(): Array<Array<Char>> {
    for (cell in cells) {
        for (i in 0..2) {
            for (j in 0..2) {
                val col = cell.x + num[i]
                val row = cell.y + num[j]
                if (col in 0 until COL && row in 0 until ROW &&
                    (field[row][col] == UNKNOWN || field[row][col] == MARK)
                ) {
                    if (field[row][col] == MARK) marks.remove(Cell(col, row))
                    field[row][col] = fieldWithMinesAndDigits[row][col]
                    countOfUnknownCells -= 1
                }
            }
        }
    }
    cells.clear()
    return field
}

data class Cell(val x: Int, val y: Int)


//печать широкого поля пробел между символами
/*fun printField(field: Array<Array<Char>>) {
    val sb1 = buildString {
        append(" |")
        repeat(COL - 1) {
            append("${it + 1} ")
        }
        append("$COL|")
    }
    val sb2 = buildString{
        append("-|")
        repeat(COL - 1) {
            append("--")
        }
        append("-|")
    }
    println("$sb1\n$sb2")
    for (index in field.indices) {
        print("${index + 1}|")
        print(field[index].joinToString(" "))
        println("|")
    }
    println(sb2)
}*/
